// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace StarWars.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20200303134754_WholeMigration")]
    partial class WholeMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CharacterId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanetId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("PlanetId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            Name = "Luke Skywalker"
                        },
                        new
                        {
                            CharacterId = 2,
                            Name = "Darth Vader"
                        },
                        new
                        {
                            CharacterId = 3,
                            Name = "Han Solo"
                        },
                        new
                        {
                            CharacterId = 4,
                            Name = "Leia Organa"
                        },
                        new
                        {
                            CharacterId = 5,
                            Name = "Wilhuff Tarkin"
                        },
                        new
                        {
                            CharacterId = 6,
                            Name = "C-3PO"
                        },
                        new
                        {
                            CharacterId = 7,
                            Name = "R2-D2"
                        });
                });

            modelBuilder.Entity("Entities.Models.CharacterCharacter", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("CharacterCharacter");
                });

            modelBuilder.Entity("Entities.Models.CharacterEpisode", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "EpisodeId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("CharacterEpisode");
                });

            modelBuilder.Entity("Entities.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EpisodeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Episodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "NEWHOPE"
                        },
                        new
                        {
                            Id = 2,
                            Name = "EMPIRE"
                        },
                        new
                        {
                            Id = 3,
                            Name = "JEDI"
                        });
                });

            modelBuilder.Entity("Entities.Models.Planet", b =>
                {
                    b.Property<int>("PlanetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PlanetId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlanetId");

                    b.ToTable("Planets");

                    b.HasData(
                        new
                        {
                            PlanetId = 1,
                            Name = "Alderaan"
                        });
                });

            modelBuilder.Entity("Entities.Models.Character", b =>
                {
                    b.HasOne("Entities.Models.Planet", "Planet")
                        .WithMany("Characters")
                        .HasForeignKey("PlanetId");
                });

            modelBuilder.Entity("Entities.Models.CharacterCharacter", b =>
                {
                    b.HasOne("Entities.Models.Character", "Character")
                        .WithMany("CharactersFriends")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Character", "Friend")
                        .WithMany("CharactersFriendsWithCharacter")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.CharacterEpisode", b =>
                {
                    b.HasOne("Entities.Models.Character", "Character")
                        .WithMany("CharactersEpisodes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Episode", "Episode")
                        .WithMany("CharactersEpisodes")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
